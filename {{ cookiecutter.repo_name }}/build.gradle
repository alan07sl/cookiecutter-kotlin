buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'distribution'
    id 'java'
    id 'jacoco'
    id "org.jetbrains.kotlin.jvm" version "{{ cookiecutter.kotlin_version }}"
    id "it.gianluz.capsule" version "1.0.3"
}

ext {
    hibernateValidatorVersion = "6.1.4.Final"
    slf4jVersion = '1.7.30'
    junitJupiterVersion = "5.6.2"
    mockitoVersion = "3.3.3"
}

group '{{ cookiecutter.group }}'
version '{{ cookiecutter.version }}'

mainClassName = '{{ cookiecutter.package_name }}.MainKt'

defaultTasks 'run'

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'

    main {
        resources {
            srcDirs "src/main/resources"
        }
    }

    test {
        resources {
            srcDirs "src/test/resources"
        }
    }
}

configurations {
    ktlint
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.2'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.11.0'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    compile group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    compile group: 'org.glassfish', name: 'javax.el', version: '3.0.0'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: "${hibernateValidatorVersion}"
    compile group: 'org.hibernate.validator', name: 'hibernate-validator-annotation-processor', version: "${hibernateValidatorVersion}"

    testCompile group: 'junit', name: 'junit', version: '4.13'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitJupiterVersion}"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitJupiterVersion}"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitJupiterVersion}"
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "${junitJupiterVersion}"
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.6.0'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: "${mockitoVersion}"
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: "${slf4jVersion}"
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'
    ktlint "com.github.shyiko:ktlint:0.31.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.allWarningsAsErrors = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.allWarningsAsErrors = true
}

task app(type: FatCapsule) {
    applicationClass '{{ cookiecutter.package_name }}.MainKt'
    archiveName 'application.jar'

    capsuleManifest {
        minJavaVersion = '1.8.0'
        jvmArgs = ['-Xms2g', '-Xmx2g']
    }
}

distributions {
    main {
        baseName 'main'
        contents {
            from app
        }
    }
}

test {
    exclude '{{ cookiecutter.package_path }}/integration/tests/**'
    exclude '{{ cookiecutter.package_path }}/unit/tests/**'

    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

wrapper {
    gradleVersion = '{{ cookiecutter.gradle_version }}'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

test.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
